//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/05. Maze/PlayerInput/ItemUse.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ItemUse: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ItemUse()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ItemUse"",
    ""maps"": [
        {
            ""name"": ""UseItem"",
            ""id"": ""e54d5c31-9f0a-41c5-b61a-4bd7dec49b75"",
            ""actions"": [
                {
                    ""name"": ""UseItem1"",
                    ""type"": ""Button"",
                    ""id"": ""d0f9b03e-f537-4fb7-bc70-078260e8df7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem2"",
                    ""type"": ""Button"",
                    ""id"": ""66d162aa-c4a8-4cbd-8354-049fb97e79f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem3"",
                    ""type"": ""Button"",
                    ""id"": ""a23b8d39-7aec-4675-88d9-8abfd9fb786f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem4"",
                    ""type"": ""Button"",
                    ""id"": ""0f63bd88-2aab-4306-8454-6efd876c2ada"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""254c67b6-4557-4ed5-908b-600b7ac9398b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7f7dfca-5499-4fda-be0f-59f60decdac0"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca510048-794b-4ce6-bbfa-9bb79445a627"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a60d638-b1d0-475a-9360-2d2d4d664956"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UseItem
        m_UseItem = asset.FindActionMap("UseItem", throwIfNotFound: true);
        m_UseItem_UseItem1 = m_UseItem.FindAction("UseItem1", throwIfNotFound: true);
        m_UseItem_UseItem2 = m_UseItem.FindAction("UseItem2", throwIfNotFound: true);
        m_UseItem_UseItem3 = m_UseItem.FindAction("UseItem3", throwIfNotFound: true);
        m_UseItem_UseItem4 = m_UseItem.FindAction("UseItem4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UseItem
    private readonly InputActionMap m_UseItem;
    private List<IUseItemActions> m_UseItemActionsCallbackInterfaces = new List<IUseItemActions>();
    private readonly InputAction m_UseItem_UseItem1;
    private readonly InputAction m_UseItem_UseItem2;
    private readonly InputAction m_UseItem_UseItem3;
    private readonly InputAction m_UseItem_UseItem4;
    public struct UseItemActions
    {
        private @ItemUse m_Wrapper;
        public UseItemActions(@ItemUse wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseItem1 => m_Wrapper.m_UseItem_UseItem1;
        public InputAction @UseItem2 => m_Wrapper.m_UseItem_UseItem2;
        public InputAction @UseItem3 => m_Wrapper.m_UseItem_UseItem3;
        public InputAction @UseItem4 => m_Wrapper.m_UseItem_UseItem4;
        public InputActionMap Get() { return m_Wrapper.m_UseItem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UseItemActions set) { return set.Get(); }
        public void AddCallbacks(IUseItemActions instance)
        {
            if (instance == null || m_Wrapper.m_UseItemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UseItemActionsCallbackInterfaces.Add(instance);
            @UseItem1.started += instance.OnUseItem1;
            @UseItem1.performed += instance.OnUseItem1;
            @UseItem1.canceled += instance.OnUseItem1;
            @UseItem2.started += instance.OnUseItem2;
            @UseItem2.performed += instance.OnUseItem2;
            @UseItem2.canceled += instance.OnUseItem2;
            @UseItem3.started += instance.OnUseItem3;
            @UseItem3.performed += instance.OnUseItem3;
            @UseItem3.canceled += instance.OnUseItem3;
            @UseItem4.started += instance.OnUseItem4;
            @UseItem4.performed += instance.OnUseItem4;
            @UseItem4.canceled += instance.OnUseItem4;
        }

        private void UnregisterCallbacks(IUseItemActions instance)
        {
            @UseItem1.started -= instance.OnUseItem1;
            @UseItem1.performed -= instance.OnUseItem1;
            @UseItem1.canceled -= instance.OnUseItem1;
            @UseItem2.started -= instance.OnUseItem2;
            @UseItem2.performed -= instance.OnUseItem2;
            @UseItem2.canceled -= instance.OnUseItem2;
            @UseItem3.started -= instance.OnUseItem3;
            @UseItem3.performed -= instance.OnUseItem3;
            @UseItem3.canceled -= instance.OnUseItem3;
            @UseItem4.started -= instance.OnUseItem4;
            @UseItem4.performed -= instance.OnUseItem4;
            @UseItem4.canceled -= instance.OnUseItem4;
        }

        public void RemoveCallbacks(IUseItemActions instance)
        {
            if (m_Wrapper.m_UseItemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUseItemActions instance)
        {
            foreach (var item in m_Wrapper.m_UseItemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UseItemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UseItemActions @UseItem => new UseItemActions(this);
    public interface IUseItemActions
    {
        void OnUseItem1(InputAction.CallbackContext context);
        void OnUseItem2(InputAction.CallbackContext context);
        void OnUseItem3(InputAction.CallbackContext context);
        void OnUseItem4(InputAction.CallbackContext context);
    }
}
